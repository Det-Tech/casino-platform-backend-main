{"version":3,"sources":["../../src/index.ts"],"names":["WalletLinkConnector","url","appName","appLogoUrl","darkMode","supportedChainIds","method","accounts","account","provider","window","walletLink","m","CoinbaseWalletSDK","deactivate","handleChainChanged","chainId","handleAccountsChanged","AbstractConnector","emitUpdate","ConnectorEvent","emitError","emitDeactivate"],"mappings":"wlBAGA,IAUaA,EAAb,Y,QASE,c,MAAcC,QAAKC,YAASC,eAAYC,aAAUC,sB,OAChD,cAAM,CAAEA,kBAAmBA,KAA3B,MAEA,MACA,YACA,eACA,WAAgBD,IAAhB,EAEA,qBAA0B,4BAA1B,IACA,wBAA6B,+BAA7B,I,IAlBJ,G,EAAA,G,sEAAA,mD,MAyBM,K,oCAWqB,mBAAsB,CAC3CE,OAAQ,yBADa,eAAjBC,GAGN,IAAMC,EAAUD,EAAhB,GAKA,OAHA,6BAAiC,EAAjC,oBACA,gCAAoC,EAApC,uBAEO,CAAEE,SAAU,EAAZ,SAA2BD,QAASA,O,gBArBvCE,kBAAwD,IAArCA,iCAErB,WAAgBA,OAAhB,a,sBACU,EAAKC,W,uBACiB,8EAAoC,YAAC,4BAAIC,OAAJ,EAAIA,EAAC,SAAL,QAArC,eAA1BC,GACN,aAAkB,SAChBX,QAAS,EADO,QAEhBE,SAAU,EAAKA,UACX,aAAkB,CAAED,WAAY,EAAKA,YAH3C,KAKA,WAAgB,8BAAiC,EAAjC,IA3CtB,M,kGAUA,iEAgDI,uBAAO,KAAP,UAhDJ,gEAoDI,uBAAO,cAAP,SApDJ,gE,uBAwD2B,sBAAsB,CAC3CG,OAAQ,yBADa,eAAjBC,GAGN,OAAOA,EAAP,MA3DJ,iDA8DSO,WACL,4CAA6C,KAA7C,oBACA,+CAAgD,KAAhD,wBAhEJ,uB,OAoEI,2BACA,iB,kBArEJ,yDAwEUC,YAIN,gBAAgB,CAAEC,QAASA,KA5E/B,wBA+EUC,YAIN,gBAAgB,CAAET,QAASD,EAAQ,MAnFvC,S,6FAVsBW,EAAtB,Y,4BAGgBb,Q,MAAkD,MAAlDA,kB,6BAEZ,oB,oHALJ,WAcYc,Y,KAIR,KAAUC,IAAV,W,EAlBJ,UAqBYC,Y,KAIR,KAAUD,IAAV,U,EAzBJ,eA4BYE,W,KAIR,KAAUF,IAAV,a,EAhCJ","file":"static/js/21.15f79626.chunk.js","sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n"],"sourceRoot":""}