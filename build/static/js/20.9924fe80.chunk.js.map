{"version":3,"sources":["../../src/index.ts"],"names":["URI_AVAILABLE","UserRejectedRequestError","supportedChainIds","rpc","Number","WalletConnectConnector","getSupportedChains","handleChainChanged","chainId","handleAccountsChanged","account","accounts","handleDisconnect","userReject","reject","resolve","error","provider","connected","walletConnectProvider","m","WalletConnectProvider","Promise","deactivate","AbstractConnector","emitUpdate","ConnectorEvent","emitError","emitDeactivate"],"mappings":"yoDAKaA,EAAgB,gBAMhBC,EAAb,YACE,a,aACE,sBACA,KAAY,cAAZ,KACA,2C,EAJJ,2BAQA,c,IAA8BC,sBAAmBC,QAC/C,WAIOA,EAAM,oBAAqB,YAAC,OAAIC,OAAJ,WAAnC,G,IAGWC,EAAb,YAIE,c,aACE,cAAM,CAAEH,kBAAmBI,EAAkB,MAA7C,MACA,SAEA,qBAA0B,4BAA1B,IACA,wBAA6B,+BAA7B,IACA,mBAAwB,0BAAxB,I,EAVJ,qDAaUC,YAIN,gBAAgB,CAAEC,aAjBtB,wBAoBUC,YAIN,gBAAgB,CAAEC,QAASC,EAAQ,MAxBvC,mBA2BUC,WAKF,KAAJ,wBACE,yDAA0D,KAA1D,oBACA,4DAA6D,KAA7D,uBACA,mCAEF,uBArCJ,0B,MAyCS,K,0BAaL,M,uBACgB,aAAoB,cAClC,IAAMC,EAAa,WAEjB,+BACAC,EAAO,IAAPA,IAIF,mDAAuD,WAErD,GACED,OAIJ,uCACQ,mBAAwBE,EAAQJ,EAAhC,OADR,OAES,YAEL,sBAAIK,UAIJF,KAHED,UApBQ,OAyBP,YACP,YA1Bc,kBAiChB,OAjCAH,IA6BA,wCAA4C,EAA5C,kBACA,0CAA8C,EAA9C,oBACA,6CAAiD,EAAjD,uBAEO,CAAEO,SAAU,EAAZ,sBAAwCP,c,qBAzC1C,kCAAqCQ,U,uBAClC,gDACJ,iBAAsB,CAAEV,QAAS,SAAYA,cADzC,qBAGN,SAAyB,kCAAzB,Q,oDAVG,EAAKW,sB,uBAC4B,mEAAgD,YAAC,4BAAIC,OAAJ,EAAIA,EAAC,SAAL,QAAjD,eAA9BC,GACN,wBAA6B,MAA0B,EAAvD,W,mDA3CN,iEA4FI,uBAAO,KAAP,uBA5FJ,gEAgGI,OAAOC,gBAAgB,2BAAvB,SAhGJ,gEAoGI,OAAO,gBAAgB,2BAAhB,gBAA2D,mBAAgCX,EAAhC,MApGtE,iDAuGSY,WACD,KAAJ,wBACE,uDAAwD,KAAxD,kBACA,yDAA0D,KAA1D,oBACA,4DAA6D,KAA7D,uBACA,0CA5GN,uB,OAiHI,sB,kBAjHJ,6C,6FAxBsBC,EAAtB,Y,4BAGgBtB,Q,MAAkD,MAAlDA,kB,6BAEZ,oB,oHALJ,WAcYuB,Y,KAIR,KAAUC,IAAV,W,EAlBJ,UAqBYC,Y,KAIR,KAAUD,IAAV,U,EAzBJ,eA4BYE,W,KAIR,KAAUF,IAAV,a,EAhCJ","file":"static/js/20.9924fe80.chunk.js","sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n"],"sourceRoot":""}